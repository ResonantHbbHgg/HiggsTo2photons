#! /usr/bin/python
import time
import os, sys
import getopt

#----------------------------------------------------------------------
# main
#----------------------------------------------------------------------

usage = """
tier2transfer [options]

--input-dir, -i                    origin directory
--output-dir, -o                   destination directory
--toCastor                         move file from hadoop to CASTOR
--toHadoop                         move files from CASTOR to hadoop (default)
"""

counter   = 1
NUMPARA   = 60
flag      = 0
diskType  = "HADOOP"
inputDir  = ""
outputDir = ""

(opts, args) = getopt.getopt(sys.argv[1:], 'i:o:h', ['toCastor', 'toHadoop', 'input-dir=', 'output-dir=', 'help'])

for opt,argm in opts:
    if (opt == "--help" or opt == "-h"):
        print 'Usage: %s' % (usage)
        sys.exit(0)
    elif (opt == "--toCastor"):
        diskType = "CASTOR"
    elif (opt == "--toHadoop"):
        diskType = "HADOOP"
    elif (opt == "-i" or opt == "--input-dir"):
        inputDir = argm
    elif (opt == "-o" or opt == "--output-dir"):
        outputDir = argm        
    else:
        print 'Wrong options: %s' % (opt)
        sys.exit(3)

if (inputDir == "" or outputDir == ""):
    print "You must specify input and output directories !"
    print 'Usage: %s' % (usage)
    sys.exit(-1)

if (diskType == "HADOOP"):
    dirs = os.popen("/usr/bin/nsls "+ inputDir).readlines()
    myHadoop = outputDir

    for dir in dirs:
        dir=dir.split("\n")[0]
        files = os.popen("/usr/bin/nsls " + inputDir + "/" + dir).readlines()
        filesinfo = os.popen("/usr/bin/nsls -l " + inputDir + "/" + dir).readlines()
        for fileinfo in filesinfo:
            fileinfo = fileinfo.split()
    
        MaxThreads=4*int(os.popen("cat /proc/cpuinfo | grep processor | awk '{print $3}' | tail -1 | xargs -i echo '{}+1' | bc").readlines()[0])
        sleepcount=0
        print MaxThreads, len(files)
        while len(filesinfo) > 0:
            threads = int(os.popen("ps | grep lcg-cp | wc | awk '{print $1}'").readlines()[0])
            if threads < MaxThreads:
                sleepcount=0
                fileinfo = filesinfo.pop().split()
                file = fileinfo[8]
                filesize = fileinfo[4]
                print file, threads, len(files)

                # check files existence and size
                line = """
lcg-ls -l -V cms -D srmv2 \"srm://bsrm-1.t2.ucsd.edu:8443/srm/v2/server?SFN=%s/%s/%s\"
""" % (myHadoop, os.path.basename(inputDir)+"/"+dir, file)
                input,checkOutput = os.popen2(line)
                hadoop_file_info = checkOutput.readlines()
                toCopy = False
                hadoop_file_size = 0 
                if (len(hadoop_file_info) == 0):
                    toCopy = True
                    print "Didn't find the file"
                else:
                    hadoop_file_size = hadoop_file_info[0].split()[4]
                    if hadoop_file_size != filesize:
                        print "hadoop_file_size, filesize  "+str(hadoop_file_size)+"  "+str(filesize)
                        toCopy = True
                        print "File is not the right size"
             
            
                if toCopy == False:
                    continue
                if ("duplicate" in file):
                    continue
                if ("empty" in file):
                    continue
                line="""
lcg-cp -v -V cms -U srmv2 -T srmv2 -n 6 \"srm://srm-cms.cern.ch/srm/managerv2?SFN=%s/%s\" \"srm://bsrm-1.t2.ucsd.edu:8443/srm/v2/server?SFN=%s/%s/%s\" &
""" % (inputDir+"/"+dir, file, myHadoop, os.path.basename(inputDir)+"/"+dir, file)
                os.system(line)
            else:
                sleepcount=sleepcount+1
                #if sleepcount>20:
                #  print "flush lcg-cp's... I'm tired of sleeping - "+str(sleepcount)
                #  os.system("ps | grep lcg-cp | awk '{print 'kill -9 '$1}' | sh")
                #else:
                print "MAX THREADS - Sleeping for 30 sec - "+str(sleepcount)
                time.sleep(30)

if (diskType == "CASTOR"):
    dirs = os.popen("ls "+ inputDir).readlines()
    myCastor = outputDir

    for dir in dirs:
        dir=dir.split("\n")[0]
        files = os.popen("ls " + inputDir + "/" + dir).readlines()
        filesinfo = os.popen("ls -l " + inputDir + "/" + dir).readlines()
        for fileinfo in filesinfo:
            fileinfo = fileinfo.split()

        MaxThreads=4*int(os.popen("cat /proc/cpuinfo | grep processor | awk '{print $3}' | tail -1 | xargs -i echo '{}+1' | bc").readlines()[0])
        sleepcount=0
        print MaxThreads, len(files)
        while len(filesinfo) > 0:
            threads = int(os.popen("ps | grep lcg-cp | wc | awk '{print $1}'").readlines()[0])
            if threads < MaxThreads:
                sleepcount=0
                fileinfo = filesinfo.pop().split()
                if (len(fileinfo) != 9):
                    continue
                file = fileinfo[8]
                filesize = fileinfo[4]

                line = """
lcg-ls -l -V cms -D srmv2 \"srm://srm-cms.cern.ch/srm/managerv2?SFN=%s/%s/%s\"
""" % (myCastor, os.path.basename(inputDir)+"/"+dir, file)
                
                input,checkOutput = os.popen2(line)
                hadoop_file_info = checkOutput.readlines()
                toCopy = False
                hadoop_file_size = 0 
                if (len(hadoop_file_info) == 0):
                    toCopy = True
                    print "Didn't find the file"
                else:
                    hadoop_file_size = hadoop_file_info[0].split()[4]
                    if hadoop_file_size != filesize:
                        print "hadoop_file_size, filesize  "+str(hadoop_file_size)+"  "+str(filesize)
                        toCopy = True
                        print "File is not the right size"
             
                if toCopy == False:
                    continue
                if ("duplicate" in file):
                    continue
                if ("empty" in file):
                    continue
                line="""
lcg-cp -v -V cms -U srmv2 -T srmv2 -n 6 \"srm://bsrm-1.t2.ucsd.edu:8443/srm/v2/server?SFN=%s/%s\" \"srm://srm-cms.cern.ch/srm/managerv2?SFN=%s/%s/%s\" &
""" % (inputDir+"/"+dir, file, myCastor, os.path.basename(inputDir)+"/"+dir, file)
                os.system(line)
            else:
                sleepcount=sleepcount+1
                print "MAX THREADS - Sleeping for 30 sec - "+str(sleepcount)
                time.sleep(30)

